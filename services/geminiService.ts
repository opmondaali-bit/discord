
import { GoogleGenAI, Modality, Chat } from "@google/genai";
import type { AspectRatio } from '../types';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = (base64: string) => {
  const pureBase64 = base64.split(',')[1];
  const mimeType = base64.match(/data:(.*);base64,/)?.[1] || 'image/jpeg';
  return {
    inlineData: {
      data: pureBase64,
      mimeType,
    },
  };
};

export const generateImage = async (prompt: string, aspectRatio: AspectRatio): Promise<string> => {
  const response = await ai.models.generateImages({
    model: 'imagen-4.0-generate-001',
    prompt,
    config: {
      numberOfImages: 1,
      outputMimeType: 'image/jpeg',
      aspectRatio: aspectRatio,
    },
  });

  const base64ImageBytes = response.generatedImages[0].image.imageBytes;
  return `data:image/jpeg;base64,${base64ImageBytes}`;
};

export const editImage = async (base64Image: string, prompt: string): Promise<string> => {
  const imagePart = fileToGenerativePart(base64Image);
  const textPart = { text: prompt };

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image',
    contents: { parts: [imagePart, textPart] },
    config: {
      responseModalities: [Modality.IMAGE],
    },
  });

  for (const part of response.candidates[0].content.parts) {
    if (part.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      const mimeType = part.inlineData.mimeType;
      return `data:${mimeType};base64,${base64ImageBytes}`;
    }
  }

  throw new Error("No image was generated by the model.");
};

export const analyzeImageWithPrompt = async (base64Image: string, prompt: string): Promise<string> => {
    const imagePart = fileToGenerativePart(base64Image);
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: [imagePart, textPart] },
    });
    return response.text;
};

export const getQuickAnalysis = async (base64Image: string): Promise<string> => {
    const imagePart = fileToGenerativePart(base64Image);
    const textPart = { text: "Describe this image concisely." };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-lite',
        contents: { parts: [imagePart, textPart] },
    });
    return response.text;
};

export const createChat = (): Chat => {
    return ai.chats.create({
        model: 'gemini-2.5-flash',
        config: {
            systemInstruction: 'You are a helpful and creative assistant specializing in art and photography. Give concise, helpful answers.',
        },
    });
};
